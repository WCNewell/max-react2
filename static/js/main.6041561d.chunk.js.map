{"version":3,"sources":["axios.js","components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","post","props","react_default","a","createElement","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","_this","id","then","response","console","log","_this2","this","get","setState","data","style","textAlign","body","Component","NewPost","content","postDataHandler","type","value","onChange","event","target","rows","Blog","posts","selectedPostId","error","postSelectedHandler","updatedPosts","slice","map","Object","objectSpread","catch","_this3","Post_Post","key","components_FullPost_FullPost","components_NewPost_NewPost","App","containers_Blog_Blog","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","interceptors","request","use","requestConfig","Promise","reject","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6041561d.chunk.js","sourcesContent":["// can use this and the global axios settings in index.js together\n\nimport axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n})\n\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE'\n\nexport default instance\n","import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\" onClick={props.clicked}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n    state = {\n        loadedPost: null\n    }\n\n    componentDidUpdate () {\n        if (this.props.id) {\n            if (!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== this.props.id))\n            axios.get('/posts/' + this.props.id)\n            .then(response => {\n                console.log(response)\n                this.setState({loadedPost: response.data})\n            })\n        }\n    }\n\n    deletePostHandler = () => {\n        axios.delete('/posts/' + this.props.id)\n            .then(response => {\n                console.log(response)\n            })\n    }\n\n    render () {\n        let post = <p style={{textAlign: 'center'}}>Please select a Post!</p>\n        if (this.props.id) {\n            post = <p style={{textAlign: 'center'}}>Loading...</p>\n        }\n        if (this.state.loadedPost) {\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button onClick={this.deletePostHandler}className=\"Delete\">Delete</button>\n                    </div>\n                </div>\n\n            );\n        }\n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\n    postDataHandler = () => {\n        const data = {\n            title: this.state.title,\n            body: this.state.content,\n            author: this.state.author\n        }\n        axios.post('https://jsonplaceholder.typicode.com/posts', data)\n            .then(response => {\n                console.log(response)\n            })\n    }\n\n    render () {\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button onClick={this.postDataHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React, { Component } from 'react';\n\n// import axios from 'axios'\n\nimport axios from '../../axios'\n\nimport Post from '../../components/Post/Post';\nimport FullPost from '../../components/FullPost/FullPost';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\n\nclass Blog extends Component {\n    state = {\n        posts: [],\n        selectedPostId: null,\n        error: false\n    }\n    componentDidMount() {\n        axios.get('/posts')\n            .then(response => {\n                const posts = response.data.slice(0, 4)\n                const updatedPosts = posts.map(post => {\n                    return {\n                        ...post,\n                        author: 'Moi'\n                    }\n                })\n                this.setState({posts: updatedPosts})\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({error: true})\n            })\n    }\n\n    postSelectedHandler = (id) => {\n        this.setState({selectedPostId: id})\n    }\n\n    render () {\n        let posts = <p style={{textAlign: 'center'}}>Something went wrong!</p>\n        if (!this.state.error) {\n            posts = this.state.posts.map(post => {\n            return <Post\n                key={post.id}\n                title={post.title}\n                author={post.author}\n                clicked={() =>this.postSelectedHandler(post.id)} />\n            })\n        }\n\n        return (\n            <div>\n                <section className=\"Posts\">\n                    {posts}\n                </section>\n                <section>\n                    <FullPost id={this.state.selectedPostId}/>\n                </section>\n                <section>\n                    <NewPost />\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Blog />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com'\n\n// Authorization header could also be added here:\naxios.defaults.headers.common['Authorization'] = 'AUTH TOKEN'\n// not needed in this case, but here is an example of requiring posts to json\naxios.defaults.headers.post['Content-Type'] = 'applcation/json'\n\n// To see and edit the configuration of the incoming data:\n\naxios.interceptors.request.use(requestConfig => {\n    console.log(requestConfig)\n    // Edit requestConfig, e.g. add authorizaton header\n    return requestConfig\n}, error => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n    console.log(response)\n    // Edit response\n    return response\n}, error => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}