{"version":3,"sources":["axios.js","components/Post/Post.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Posts/Posts.js","hoc/asyncComponent.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","post","props","react_default","a","createElement","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","_this","match","params","id","then","response","console","log","this","loadData","_this2","get","setState","data","style","textAlign","body","Component","Posts","posts","postSelectedHandler","history","push","updatedPosts","slice","map","Object","objectSpread","catch","error","_this3","Post_Post","key","Route","path","url","exact","component","asyncComponent","importComponent","_Component","_class2","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","inherits","createClass","value","cmp","default","C","AsyncNewPost","__webpack_require__","e","bind","Blog","auth","NavLink","to","activeStyle","color","textDecoration","pathname","Switch","render","App","BrowserRouter","containers_Blog_Blog","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","interceptors","request","use","requestConfig","Promise","reject","ReactDOM","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.996170b4.chunk.js","sourcesContent":["// can use this and the global axios settings in index.js together\n\nimport axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n})\n\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE'\n\nexport default instance\n","import React from 'react'\n// import { withRouter } from 'react-router-dom'\n\nimport './Post.css'\n\nconst post = ( props ) => (\n    <article className=\"Post\" onClick={props.clicked}>\n        <h1>{props.title}</h1>\n            <div className=\"Info\">\n                <div className=\"Author\">{props.author}</div>\n            </div>\n    </article>\n)\n\n// const post = ( props ) => {\n//     console.log(props)\n//     return (\n//         <article className=\"Post\" onClick={props.clicked}>\n//             <h1>{props.title}</h1>\n//                 <div className=\"Info\">\n//                     <div className=\"Author\">{props.author}</div>\n//                 </div>\n//         </article>\n//     )\n// }\n\n// export default withRouter(post)\n\nexport default post","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n    state = {\n        loadedPost: null\n    }\n\n    componentDidMount () {\n        console.log(this.props)\n        this.loadData()\n    }\n\n    componentDidUpdate () {\n        console.log(this.props)\n        this.loadData()\n    }\n\n    loadData () {\n        if (this.props.match.params.id) {\n            if (!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== +this.props.match.params.id))\n                axios.get('/posts/' + this.props.match.params.id)\n                .then(response => {\n                    console.log(response)\n                    this.setState({\n                        loadedPost: response.data\n                    })\n                })\n        }\n    }\n\n    deletePostHandler = () => {\n        axios.delete('/posts/' + this.props.match.params.id)\n            .then(response => {\n                console.log(response)\n            })\n    }\n\n    render () {\n        let post = <p style={{textAlign: 'center'}}>Please select a Post!</p>\n        if (this.props.match.params.id) {\n            post = <p style={{textAlign: 'center'}}>Loading...</p>\n        }\n        if (this.state.loadedPost) {\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button onClick={this.deletePostHandler}className=\"Delete\">Delete</button>\n                    </div>\n                </div>\n\n            );\n        }\n        return post\n    }\n}\n\nexport default FullPost","import React, { Component } from 'react'\nimport axios from '../../../axios'\nimport { Route } from 'react-router-dom'\nimport Post from '../../../components/Post/Post'\nimport FullPost from '../FullPost/FullPost'\nimport './Posts.css'\n\n\nclass Posts extends Component {\n\n    state = {\n        posts: []\n    }\n\n    componentDidMount() {\n        console.log(this.props)\n        axios.get('/posts')\n            .then(response => {\n                const posts = response.data.slice(0, 4)\n                const updatedPosts = posts.map(post => {\n                    return {\n                        ...post,\n                        author: 'Moi'\n                    }\n                })\n                this.setState({posts: updatedPosts})\n                // console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n                // this.setState({error: true})\n            })\n    }\n\n\n    postSelectedHandler = (id) => {\n        // this.props.history.push({ pathname: '/posts' + id })\n        // or\n        this.props.history.push('/posts/' + id)\n        // or\n        // this.setState({\n        //     selectedPostId: id\n        // })\n    }\n\n    render () {\n        let posts = <p style={{textAlign: 'center'}}>Something went wrong!</p>\n        if (!this.state.error) {\n            posts = this.state.posts.map(post => {\n            return (\n                // <Link to={'/posts' + post.id} key={post.id}>\n                    <Post\n                        key={post.id}\n                        title={post.title}\n                        author={post.author}\n                        clicked={() =>this.postSelectedHandler(post.id)} />\n                // </Link>\n            )})\n        }\n\n        return (\n            <div>\n                <section className='Posts'>\n                    { posts }\n                </section>\n                <Route path={this.props.match.url + '/:id'} exact component={FullPost} />\n            </div>\n        )\n    }\n}\n\nexport default Posts","import React, { Component } from 'react'\n\nconst asyncComponent = (importComponent) => {\n    return class extends Component {\n\n        state = {\n            component: null\n        }\n\n        componentDidMount () {\n            importComponent ()\n                .then(cmp => {\n                    this.setState({component: cmp.default})\n                })\n        }\n\n        render () {\n            const C = this.state.component\n\n            return C ? <C {...this.props} /> : null\n        }\n    }\n}\n\nexport default asyncComponent","import React, { Component } from 'react';\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom'\n\n// import axios from 'axios'\n\n// import axios from '../../axios'\n\nimport Posts from '../Blog/Posts/Posts'\nimport asyncComponent from '../../hoc/asyncComponent'\n// import NewPost from './NewPost/NewPost'\nimport './Blog.css'\n\nconst AsyncNewPost = asyncComponent (() => {\n    return import('./NewPost/NewPost')\n})\n\nclass Blog extends Component {\n\n    state = {\n        auth: true\n    }\n    \n    render () {\n\n        return (\n            <div className='Blog'>\n                <header>\n                    <nav>\n                        <ul>\n                            <li><NavLink\n                                to='/posts'\n                                exact\n                                activeStyle={{\n                                    color: '#fa923f',\n                                    textDecoration: 'underline'\n                                }}>Posts</NavLink></li>\n                            <li><NavLink to={{\n                                pathname: '/newpost',\n                                // ^^ this always generates an absolute path\n                                // pathname: this.props.match.url + '/newpost'\n                                // ^^ example of how to build a dynamic relative path\n                                // hash: '#submit',\n                                // ^^ example of syntax used when appending a jump-to \"fragment\" to a URL...\n                                // search: '?quick-submit-true'\n                                // ^^ example of query param\n                            }}>New Post</NavLink></li>\n                        </ul>\n                    </nav>\n                </header>\n                {/* <Route path=\"/\" exact render={() => <h1>Home</h1>} /> */}\n                {/* <Route path='/' exact component={Posts} /> */}\n                {/* // ^^ Route can live outside switch, basically you can mix and match these to create what you want/need */}\n                <Switch>\n                    {this.state.auth ? <Route path='/newpost' exact component={AsyncNewPost} /> : null }\n                    <Route path='/posts' component={Posts} />\n                    <Route render={()=> <h1>Not found</h1>} />\n                    {/* <Route path='/' component={Posts} /> */}\n                    {/* <Redirect from='/' to='/posts' /> */}\n                    {/* Here the switch statement is not necessary but left for reference purposes */}\n                    {/* Also in Redirect above, the from statement only works here because it is wrapped in the Switch element */}\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\nimport { BrowserRouter }from 'react-router-dom'\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Blog />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com'\n\n// Authorization header could also be added here:\naxios.defaults.headers.common['Authorization'] = 'AUTH TOKEN'\n// not needed in this case, but here is an example of requiring posts to json\naxios.defaults.headers.post['Content-Type'] = 'applcation/json'\n\n// To see and edit the configuration of the incoming data:\n\naxios.interceptors.request.use(requestConfig => {\n    console.log(requestConfig)\n    // Edit requestConfig, e.g. add authorizaton header\n    return requestConfig\n}, error => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n    console.log(response)\n    // Edit response\n    return response\n}, error => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}